openapi: 3.0.3
info:
  title: PayBack Specification
  description: |
    This OpenAPI document describes the PayBack project REST API.
  version: "1.0.0"

servers:
  - url: "http://localhost:8000"
    description: localhost server, for development purposses.

tags:
  - name: login
    description: Operations related to login management.
  - name: signup
    description: Operations related to signup process
  - name: user
    description: Operations related to profile management and users' search.  
  

security:
  - tokenAuthentication: []


paths:

  /signup: 
    description: |
     endpoint for creating a new acc, this endpoint will create only
     regular users (not admins)
    post: 
      tags: ["signup"]
      summary: Creates a new user with given credentails
      description: |
        creates a new user based on given username that should be unique, password, email and optionaly profile picture
      security: []
      operationId: doSignup
      requestBody: 
        description: user signup details
        required: true
        content: 
          application/json: 
            schema: 
              description: |  
                  creating new user requires username, password, email and optionally prof pic
              properties: 
                username: { $ref: "#/components/schemas/username"}
                password: { $ref: "#/components/schemas/password"}
                email: { $ref: "#/components/schemas/email"}
                profilePicture: { $ref: "#/components/schemas/profilePicture" } 
      responses: 
        "201":
          description: | 
              sing up succ, returns user token with user profile.
          content:
            application/json:
              schema: { $ref: "#/components/responses/loginResponse" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }
  
  /login:
    description: endpoint enabling login.
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        I know ppl want to use Google Auth but idk how to implement it, and think its implementation is on Front-End so i just leave it like this
      security: []
      operationId: doLogin
      requestBody:
        description: User login details.
        required: true
        content:
          application/json:
            schema:
              description: |
                  login is based on username and password that 
                  user should provide. In response server sends back 
                  user details and auth token that will be used later 
                  for other operations 
              properties:
                username: { $ref: "#/components/schemas/username" }
                password: { 
                  $ref: "#/components/schemas/password"
                }
      responses:
        "200":
          description: login succ, returns user token and user details
          content:
            application/json:
              schema: { $ref: "#/components/responses/loginResponse" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }
  
  /test_token: 
    description: enpoint to test the authentity of token 
    get:  
      tags: ["token"]
      summary: checks authentity of token 
      description: |
        checks authentity of a token that is sent in http Authorization header. If token is valid server sends back a 200 status response
      operationId: checkToken
      responses: 
        "200": { $ref: "#/components/schemas/user" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "500": { $ref: "#/components/responses/ServerError" }
  
  /users/:
    description: endpoint for operations related to a list of users
    get:
      tags: ["user"]
      summary: Search users' collection
      description: |
        for now it just return all users, later will be added fucntionality to search users based on matching whole username or part of username
      operationId: searchUser
      responses:
        "200": { $ref: "#/components/responses/userListResponse" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        # No 403: User will not see banned users
        # No 404: 404 would be 200 empty-userListResponse
        "500": { $ref: "#/components/responses/ServerError" }
  
  /users/{userId}/:
    description: endpoint for operations related to user 
    parameters:
       - name: userId
         in: path
         required: true
         schema: 
           $ref: "#/components/parameters/id"
    get:
      tags: ["user"]
      summary: retuns a user details of user with given userID
      description: |
        get a user's profile details given their user identifier.
        An authenticated session is requested to perform this and all other operations except of /login and /signup 
        due to privacy 

      operationId: getUserProfile
      responses:
        "200":
          description: user was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }

    put: 
      tags: ["user"]
      summary: update a user's profile with new data 
      description: |
        changes user's details with a new given one. For now you can change only username, email and profile picture
      operationId: updateUser
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
             description: fields to update 
             properties: 
                username:  { $ref: "#/components/schemas/username" }
                email:  { $ref: "#/components/schemas/email" }
                groups: { $ref: "#/components/schemas/groups" }
                profilePicture: { $ref: "#/components/schemas/profilePicture" }
      responses:
        "200":
          description: user was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }
    delete: 
      tags: ["user"]
      summary: delete user with given userId 
      operationId: deleteUser
      responses: 
        "204":
          description: user was deleted
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }
  /groups/: 
    description: endpoint of list of groups
    get:
      tags: ["groups"]
      summary: get groups collection
      description: |
          return list of all groups, later will be added fucntionality to get list of groups with specific name or with name that partially or fully match the querry search name
      operationId: getGroups
      responses:
        "200": { $ref: "#/components/responses/groupListResponse" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        # No 403: User will not see banned users
        # No 404: 404 would be 200 empty-userListResponse
        "500": { $ref: "#/components/responses/ServerError" }
    post: 
      tags: ["groups"]
      summary: create a new group
      description: |
        creates a new group with data given in request 
      operationId: createGroup
      requestBody: 
        description: user signup details
        required: true
        content: 
          application/json: 
            schema: 
              { $ref: "#/components/schemas/group" }
          
      responses: 
        "201":
          description: created group succ 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/group" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }
  
  /groups/{groupId}/: 
    description: | 
      endpoint related to operations with single group with given 
      groupId
    parameters: 
      - name:  groupId
        in: path
        required: true
        schema: {$ref: "#/components/parameters/id" }
    get:
      tags: ["group"]
      summary: get a group details given the group Identifier
      description: |
        returns a group details given group's id.
        An authenticated session is requested to perform this action, 
        due to privacy and ban-related reasons.
      operationId: getGroup
      responses:
        "200":
          description: group was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/group" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }

    put: 
      tags: ["group"]
      summary: update a user's profile with new data 
      description: |
        changes group's details with a new given one.
      operationId: updateGroup
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
             description: fields to update 
             properties: 
                name: 
                  description: unique name of a group
                  type: string
                  example: hci
                  minLength: 3
                  maxLength: 15
                users: 
                   $ref: "#/components/schemas/users"
      responses:
        "200":
          description: user was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }
    delete: 
      tags: ["group"]
      summary: delete group with given groupId 
      operationId: deleteGroup
      responses: 
        "204":
          description: group was deleted
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }
  /groups/{groupId}/debts/:
    description: |
           endpoint of list of debts related to group with given groupId
    parameters: 
      - name:  groupId
        in: path
        required: true
        schema: {$ref: "#/components/parameters/id" }
    get:
      tags: ["debts"]
      summary: get debts collection
      description: |
          return list of all debts related to group with given groupId
      operationId: getDebts
      responses:
        "200": { $ref: "#/components/responses/debtsListResponse" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        # No 403: User will not see banned users
        # No 404: 404 would be 200 empty-userListResponse
        "500": { $ref: "#/components/responses/ServerError" }
    post: 
      tags: ["debts"]
      summary: create a new debt
      description: |
        creates a new debt with data given in request 
      operationId: createDebt
      requestBody: 
        description: debt details
        required: true
        content: 
          application/json: 
            schema: 
              { $ref: "#/components/schemas/debt" }
          
      responses: 
        "201":
          description: created debt succ 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/debt" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }
  /groups/{groupId}/debts/{debtId}:
    description: |
           endpoint of list of debts related to group with given groupId
    parameters: 
      - name:  groupId
        in: path
        required: true
        schema: {$ref: "#/components/parameters/id" }
      - name: debtId
        in: path
        required: true
        schema: {$ref: "#/components/parameters/id" }
    get:
      tags: ["debt"]
      summary: get a debt with given debtId
      description: |
          returns a debt with given debtId that belong to group with given groupId
      operationId: getDebt
      responses:
        "200": { $ref: "#/components/schemas/debt" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        # No 403: User will not see banned users
        # No 404: 404 would be 200 empty-userListResponse
        "500": { $ref: "#/components/responses/ServerError" }
    put: 
      tags: ["group"]
      summary: update a user's profile with new data 
      description: |
        changes group's details with a new given one.
      operationId: updateDebt
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
             description: |
                fields to update, here owner is user that paid for other users and now other users that are mentioned in users field owe money. Amounts is for now just a string that stores amount that each user owes money
                  Each number corresponds to debt of user in users field with same position as in amounts.
                 owner: ["Aang]
                 users: ["Sam","Bob"]
                 amounts: [1,2]
                 
                 sam owns Aang 1
                 bob owns Aang 2
                 
             properties: 
                owner: 
                  $ref: "components/schemas/id"  
                users: 
                   $ref: "#/components/schemas/users"
                amounts: 
                  description: | 
                      amounts that users owe to owner 
                  type: string
                  example: '[1,2,3]'
      responses:
        "200":
          description: debt was found and details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }
    delete: 
      tags: ["debt"]
      summary: delete debt with given debtId 
      operationId: deleteDebt
      responses: 
        "204":
          description: debt was deleted
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }
components:
  parameters:
    id:
      description: |
        a unique identification number. Users, groups, debts have their own unique number.

      name: id
      required: true
      in: path
      schema: { $ref: "#/components/schemas/token" }

  responses:
    groupListResponse: 
      description: returns list of groups successfully
      content: 
        application/json:   
          schema: 
            { $ref: "#/components/schemas/groups" }
          
    BadRequestError:
      description: request not compliant with REST API specifications.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    ServerError:
      description: an unexpected condition was encountered while handling the request.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    AuthorizationError:
      description: |
        An authenticated session is requested to access this endpoint,
        but no valid authentication was included in the request.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    ForbiddenError:
      description: |
        An authenticated session is needed to access this endpoint,
        and a valid authentication was included in the request,
        but the server is refusing action due to either a lack of the 
        necessary permissions for handling the requested resource or 
        because the user was attempting a prohibited action.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    NotFoundError:
      description: |
        the resource was not found: 
        - if searching for a user: the id doesn't exist.
        - if searching for a photo: the photoId doesn't exist.
        - if searching for a comment: the photoId or the commentID don't exist. 
        
        An error is returned.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    debtsListResponse:
      description: |
        returns a list of debts to be displayed at the client.
        The array may or may not contain elements.

      content: 
        application/json:
          schema: 
            description: |
              the list of debts to be displayed at the client.
              The array may or may not contain elements
            type: object
            properties:
              debts: { $ref: "#/components/schemas/debts" }
    userListResponse:
      description: |
        returns a list of users to be displayed at the client.
        The array may or may not contain elements.

      content: 
        application/json:
          schema: 
            description: |
              the list of users to be displayed at the client.
              The array may or may not contain elements
            type: object
            properties:
              users: { $ref: "#/components/schemas/userList" }
    loginResponse:
      description: |
        returns a user token and user profile. Used after succ login or singup
      content: 
        application/json:
          schema: 
            description: |
              token and user details that will be sent to user after succ login or signup
            type: object
            properties:
              token: { $ref: "#/components/schemas/token" }
              user: { $ref: "#/components/schemas/user" } 
  schemas:
    groups: 
      description: a collection of groups 
      type: array
      items: 
        { $ref: "#/components/schemas/group"} 
    group: 
      description: a group of users that share expenses
      type: object
      properties: 
        id: 
          description: unique id of a group
          type: integer
          example: 1
        name: 
          description: unique name of a group
          type: string
          example: hci
          minLength: 3
        users: 
          { $ref: "#/components/schemas/userList" }
        amount: 
          description: |
              the amount of debt of all users, idk why i added this, 
              but let it be for now 
          type: integer
          example: 300
        created: 
          description: date when the group was created
          type: string
          format: date
          example: 2011-11-11
        debts: 
          description: the collection of debts
          type: array
          items: 
            {$ref: "#/components/schemas/debt"}
    debt: 
      description: a debt 
      type: object
      properties: 
        id: 
          description: unique id of a group
          type: integer
          example: 1
        owner: 
           {$ref: "#/components/schemas/user"}
        debts: 
          description: how much other users own to owner 
          type: string 
          example: "[1,2,3]"
    profilePicture: 
      description: profile picture(idk later will add)
    email: 
      description: email of user 
      type: string
      maxLength: 30
      minLength: 3 
    password: 
      description: a user password
      type: string
      maxLength: 30
      minLength: 3 
    Error:
      description: Structure of an Error response.
      type: string
      minLength: 0
      maxLength: 250
      readOnly: true
    username:
        type: string
        example: hci
        pattern: "^[a-zA-Z][\\.]{0,1}(?:[\\w][\\.]{0,1})*[\\w]$"
        minLength: 3
        maxLength: 25
        description: |
          User's personal and unique username, used during login. It has the follwing properties:
          - Matches . (`disco.dude.boy` 200) but not .. (`disco.dude..boy` 400)
          - Beginning period not matched (`.discodude` 400)
          - Ending period NOT matched (`discodude.` 400)
          - Match underscores (`_disco__dude_` 200)
          - Min 3 characters 
          - Max 25 characters 


    token:
      description: |
        The Unique Resource Id of an element, be it a user, photo or comment.
    
      type: string
      example: 7ecfb6d7e79df69c34d448d17a92151211498ba
      readOnly: true
    debts: 
      description: collection of debts 
      type: array
      items: {$ref: "#/components/schemas/debt"}
    users: 
      description: collection of users 
      type: array
      items: {$ref: "#/components/schemas/user"}

    user:
      description: |
        a user object. 
      
      type: object
      properties:
        token: { $ref: "#/components/schemas/token" }
        username: { $ref: "#/components/schemas/username" }
        email: { $ref: "#/components/schemas/email"} 
        owns: 
          description: boolean field that describes if user has any debt
          type: boolean
          readOnly: true
          example: false
        groups: 
          { $ref: "#/components/schemas/groups" } 
        profilePicture: 
          { $ref: "#/components/schemas/profilePicture" }
        dateJoined: 
          description: a date when user joined an app
          readOnly: true
          type: string
          format: date
          example: 2011-11-11

        
    userList:
      description: |
        an array of `User`, to be displayed in search queries.
        it should be included in an object and be named `users`, as in userListResponse. 
      type: array
      items: { $ref: "#/components/schemas/user" }
      minItems: 0
      maxItems: 24

  

  securitySchemes:
    tokenAuthentication:
      description: |
        User authentication with the token of user 
        as an authentication token.
        
      type: http
      scheme: token