openapi: 3.0.3
info:
  title: PayBack Specification
  description: |
    This OpenAPI document describes the PayBack project REST API.
  version: "1.0.0"

servers:
  - url: "http://localhost:8000"
    description: localhost server, for development purposses.

tags:
  - name: session
    description: Operations related to session management.

  - name: user
    description: Operations related to profile management and users' search.  


security:
  - bearerAuthentication: []


paths:

  /signup: 
    description: |
     endpoint for creating a new acc, this endpoint will create only
     regular users (not admins)
    post: 
      tags: ["signup"]
      summary: Creates a new user with given credentails
      description: |
        creates a new user based on given username that should be unique, password, email and optional profile picture
      security: []
      operationId: doSignup
      requestBody: 
        description: user signup details
        required: true
        content: 
          application/json: 
            schema: 
              description: |  
                  creating new user requires username, password, email and optionally prof pic
              properties: 
                username: { $ref: "#/components/schemas/username"}
                password: { 
                  $ref: "#/components/schemas/password"}
                email: { $ref: "#/components/schemas/email"}
                profilePicture: { $ref: "#/components/schemas/profilePicture" } 
      responses: 
        "201":
          description: sing up succ, returns user identifier.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }
  
  /login:
    description: endpoint enabling login.
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        I know ppl want to use Google Auth but idk how to implement it, and think its implementation is on Front-End so i just leave it like this
      security: []
      operationId: doLogin
      requestBody:
        description: User login details.
        required: true
        content:
          application/json:
            schema:
              description: |
                  login is based on username and password that 
                  user should provide. In response server sends back 
                  user details and auth token that will be used later 
                  for other operations 
              properties:
                username: { $ref: "#/components/schemas/username" }
                password: { 
                  $ref: "#/components/schemas/password"
                }
      responses:
        "200":
          description: login succ, returns user identifier.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }
  
  /test_token: 
    description: enpoint to test the authentity of token 
    get:  
      tags: ["token"]
      summary: checks authentity of token 
      description: |
        checks authentity of a token that is sent in http Authorization header. If token is valid server sends back a 200 status response
      operationId: checkToken
      responses: 
        "200": { $ref: "#/components/responses/userListResponse" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "500": { $ref: "#/components/responses/ServerError" }
  
  /users/:
    description: endpoint to get a list of users
    get:
      tags: ["user"]
      summary: Search users' collection
      description: |
        for now it just return all users, later will be added fucntionality to search users based on matching whole username or part of username
      operationId: searchUser
      responses:
        "200": { $ref: "#/components/responses/userListResponse" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        # No 403: User will not see banned users
        # No 404: 404 would be 200 empty-userListResponse
        "500": { $ref: "#/components/responses/ServerError" }
  
  /users/{userID}:
    description: endpoint for retrieving a user with specific id
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      tags: ["user"]
      summary: get a user's profile given the user Identifier
      description: |
        get a user's profile details given their user identifier.
        The remaining content of the profile (i.e. the photo binary),
        must be requested through the dedicated endpoint: `/photos/{photoID}/`.

        An authenticated session is requested to perform this action, 
        due to privacy and ban-related reasons.

      operationId: getUserProfile
      responses:
        "200":
          description: user was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }

    put: 
      tags: ["user"]
      summary: update a user's profile with new data 
      description: |
        changes user's details with a new given one. For now you can change only username, email and profile picture
      operationId: updateUser
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
             description: fields to update 
             properties: 
                username:  { $ref: "#/components/schemas/username" }
                email:  { $ref: "#/components/schemas/email" }
                groups: { $ref: "#/components/schemas/groups" }
                profilePicture: { $ref: "#/components/schemas/profilePicture" }
      responses:
        "200":
          description: user was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }

components:
  parameters:
    UserID:
      description: |
        Value representing the unique identifier of a user.
        The UserID is employed whenever information or actions on a generic
        user is requested by the sender, for example listing the user details,
        following/banning a user.

      name: userID
      required: true
      in: path
      schema: { $ref: "#/components/schemas/token" }

  responses:
    BadRequestError:
      description: request not compliant with REST API specifications.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    ServerError:
      description: an unexpected condition was encountered while handling the request.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    AuthorizationError:
      description: |
        An authenticated session is requested to access this endpoint,
        but no valid authentication was included in the request.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    ForbiddenError:
      description: |
        An authenticated session is needed to access this endpoint,
        and a valid authentication was included in the request,
        but the server is refusing action due to either a lack of the 
        necessary permissions for handling the requested resource or 
        because the user was attempting a prohibited action.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    NotFoundError:
      description: |
        the resource was not found: 
        - if searching for a user: the UserID doesn't exist.
        - if searching for a photo: the photoId doesn't exist.
        - if searching for a comment: the photoId or the commentID don't exist. 
        
        An error is returned.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

    userListResponse:
      description: |
        returns a list of users to be displayed at the client.
        The array may or may not contain elements.

      content: 
        application/json:
          schema: 
            description: |
              the list of users to be displayed at the client.
              The array may or may not contain elements
            type: object
            properties:
              users: { $ref: "#/components/schemas/userList" }
    
  schemas:
    groups: 
      description: | 
         a collection of groups 
      type: object
      properties: 
        id: 
          description: unique id of a group
          type: integer
          example: 1
        name: 
          description: unique name of a group
          type: string
          example: hci
          minLength: 3
        users: 
          { $ref: "#/components/schemas/userList" }
        amount: 
          description: the amount of debt of all users 
          type: integer
          example: 300
        created: 
          description: date when the group was created
          type: string
          format: date
          example: 2011-11-11
        debts: 
          description: the collection of debts
          type: array
          items: 
            {$ref: "#/components/schemas/debt"}
        
    debt: 
      description: a debt 
      type: object
      properties: 
        id: 
          description: unique id of a group
          type: integer
          example: 1
        owner: 
           {$ref: "#/components/schemas/user"}
        debts: 
          description: how much other users own to owner 
          type: string 
          example: "[1,2,3]"
    profilePicture: 
      description: profile picture(idk later will add)
    email: 
      description: email of user 
      type: string
      maxLength: 30
      minLength: 3 
    password: 
      description: a user password
      type: string
      maxLength: 30
      minLength: 3 
    Error:
      description: Structure of an Error response.
      type: string
      minLength: 0
      maxLength: 250
      readOnly: true
    username:
        type: string
        example: de.dead.b33f_03
        pattern: "^[a-zA-Z][\\.]{0,1}(?:[\\w][\\.]{0,1})*[\\w]$"
        minLength: 5
        maxLength: 25
        description: |
          User's personal and unique username, used during login. It has the follwing properties:
          - Matches . (`disco.dude.boy` 200) but not .. (`disco.dude..boy` 400)
          - Beginning period not matched (`.discodude` 400)
          - Ending period NOT matched (`discodude.` 400)
          - Match underscores (`_disco__dude_` 200)
          - Min 5 characters 
          - Max 25 characters 


    token:
      description: |
        The Unique Resource Id of an element, be it a user, photo or comment.
    
      type: integer
      example: 4902
      readOnly: true
      maximum: 18446744073709551615 # 2^64-1 
      minimum: 0

    Text:
      description: Generic text. All user-inserted text-blocks will have this format.
      type: string
      example: Si sta come d'autunno sugli alberi le foglie
      pattern: ".*"
      minLength: 0
      maxLength: 2000


    user:
      description: |
        Resource representing a user. It contains information about the user, including:
        - the `userId`, enabling to perform actions on the user's resources.
        - the `username`.
      
      type: object
      properties:
        token: { $ref: "#/components/schemas/token" }
        username: { $ref: "#/components/schemas/username" }
        
    userList:
      description: |
        an array of `User`, to be displayed in search queries.
        it should be included in an object and be named `users`, as in userListResponse. 
      type: array
      items: { $ref: "#/components/schemas/user" }
      minItems: 0
      maxItems: 24

  

  securitySchemes:
    bearerAuthentication:
      description: |
        User authentication with the user ID passed
        as an authentication token.
        Of course, that is extremely insecure, but it's done
        according to the project specification.
      type: http
      scheme: bearer