openapi: 3.0.3
info:
  title: PayBack Specification
  description: |
    This OpenAPI document describes the PayBack project REST API.
  version: "1.0.0"

servers:
  - url: "http://localhost:8000"
    description: localhost server, for development purposses.

tags:
  - name: session
    description: Operations related to session management.

  - name: user
    description: Operations related to profile management and users' search.  

  - name: ban
    description: Operations related to bans/pardons.

  - name: follow
    description: Operations related to follow status management.

  - name: files
    description: Operations related to files and photos upload and management.

  - name: likes
    description: Operations related to management of likes.

  - name: comments
    description: Operations related to management of comments.
  
  - name: settings
    description: Operations related to modifications of the user's profile.
  
  - name: stream
    description: Operations related to accessing the user's stream.


security:
  - bearerAuthentication: []


paths:
  /login:
    description: endpoint enabling login.
    post:
      tags: ["session"]
      summary: Logs in the user
      description: |
        I know ppl want to use Google Auth but idk how to implement it, and think its implementation is on Front-End so i just leave it like this
      security: []
      operationId: doLogin
      requestBody:
        description: User login details.
        required: true
        content:
          application/json:
            schema:
              description: |
                User Login-Request, containing the user's username and password.
                The response will contain an appropriate user identifier.
              properties:
                username: { $ref: "#/components/schemas/Username" }
                password: { 
                  $ref: "#/components/schemas/password"
                }
              
    
      responses:
        "200":
          description: login succ, returns user identifier.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResourceId" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        # No 401
        # No 403
        # No 404
        "500": { $ref: "#/components/responses/ServerError" }


  /users/:
    description: endpoint disclosing the users' collection.
    get:
      tags: ["user"]
      summary: Search users' collection
      description: |
        Search users through a complete or partial match of their usernames.

        Not required by project specifications.
        An authenticated session is requested to perform this action, 
        due to privacy and ban-related reasons.

      operationId: SearchUsers
      parameters:
        - name: username
          in: query
          description: Complete or partial username
          required: true
          schema: { $ref: "#/components/schemas/Username" }

      responses:
        "200": { $ref: "#/components/responses/UserListResponse" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        # No 403: User will not see banned users
        # No 404: 404 would be 200 empty-UserListResponse
        "500": { $ref: "#/components/responses/ServerError" }
      

  /users/{userID}:
    description: endpoint disclosing actions on a user-profile resource, identified by their UserID.
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      tags: ["user"]
      summary: get a user's profile given the user Identifier
      description: |
        get a user's profile details given their user identifier.
        The remaining content of the profile (i.e. the photo binary),
        must be requested through the dedicated endpoint: `/photos/{photoID}/`.

        An authenticated session is requested to perform this action, 
        due to privacy and ban-related reasons.

      operationId: getUserProfile
      responses:
        "200":
          description: user was found and profile details returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/ServerError" }


  
  /settings/username:
    description: endpoint disclosing actions on the authenticated user's resource.
    put:
      tags: ["settings"]
      summary: Update current username
      description: |
        Update the username.

        An authenticated session is requested to perform this action, 
        in order to select the correct resource.
      
      operationId: setMyUserName
      requestBody:
        description: Fields to update in the current user's resource
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }

      responses:
        "200": 
          description: user details successfully modified.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/AuthorizationError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
          # User requested a username that was already taken

        # No 404: user exists
        "500": { $ref: "#/components/responses/ServerError" }
  
components:
  parameters:
    UserID:
      description: |
        Value representing the unique identifier of a user.
        The UserID is employed whenever information or actions on a generic
        user is requested by the sender, for example listing the user details,
        following/banning a user.

      name: userID
      required: true
      in: path
      schema: { $ref: "#/components/schemas/ResourceId" }

  responses:
    BadRequestError:
      description: request not compliant with REST API specifications.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    ServerError:
      description: an unexpected condition was encountered while handling the request.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    AuthorizationError:
      description: |
        An authenticated session is requested to access this endpoint,
        but no valid authentication was included in the request.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    ForbiddenError:
      description: |
        An authenticated session is needed to access this endpoint,
        and a valid authentication was included in the request,
        but the server is refusing action due to either a lack of the 
        necessary permissions for handling the requested resource or 
        because the user was attempting a prohibited action.
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    NotFoundError:
      description: |
        the resource was not found: 
        - if searching for a user: the UserID doesn't exist.
        - if searching for a photo: the photoId doesn't exist.
        - if searching for a comment: the photoId or the commentID don't exist. 
        
        An error is returned.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

    UserListResponse:
      description: |
        returns a list of users to be displayed at the client.
        The array may or may not contain elements.

      content: 
        application/json:
          schema: 
            description: |
              the list of users to be displayed at the client.
              The array may or may not contain elements
            type: object
            properties:
              users: { $ref: "#/components/schemas/UserList" }
    
  
  


  schemas:
    password: 
      description: a user password
      type: string
      maxLength: 30
      minLength: 3 
    Error:
      description: Structure of an Error response.
      type: string
      minLength: 0
      maxLength: 250
      readOnly: true
    Username:
        type: string
        example: de.dead.b33f_03
        pattern: "^[a-zA-Z][\\.]{0,1}(?:[\\w][\\.]{0,1})*[\\w]$"
        minLength: 5
        maxLength: 25
        description: |
          User's personal and unique username, used during login. It has the follwing properties:
          - Matches . (`disco.dude.boy` 200) but not .. (`disco.dude..boy` 400)
          - Beginning period not matched (`.discodude` 400)
          - Ending period NOT matched (`discodude.` 400)
          - Match underscores (`_disco__dude_` 200)
          - Min 5 characters 
          - Max 25 characters 


    ResourceId:
      description: |
        The Unique Resource Id of an element, be it a user, photo or comment.
    
      type: integer
      example: 4902
      readOnly: true
      maximum: 18446744073709551615 # 2^64-1 
      minimum: 0

    Text:
      description: Generic text. All user-inserted text-blocks will have this format.
      type: string
      example: Si sta come d'autunno sugli alberi le foglie
      pattern: ".*"
      minLength: 0
      maxLength: 2000


    User:
      description: |
        Resource representing a user. It contains information about the user, including:
        - the `userId`, enabling to perform actions on the user's resources.
        - the `username`.
      
      type: object
      properties:
        userId: { $ref: "#/components/schemas/ResourceId" }
        username: { $ref: "#/components/schemas/Username" }
    
    UserList:
      description: |
        an array of `User`, to be displayed in search queries.
        it should be included in an object and be named `users`, as in UserListResponse. 
      type: array
      items: { $ref: "#/components/schemas/User" }
      minItems: 0
      maxItems: 24

  

  securitySchemes:
    bearerAuthentication:
      description: |
        User authentication with the user ID passed
        as an authentication token.
        Of course, that is extremely insecure, but it's done
        according to the project specification.
      type: http
      scheme: bearer